#!/usr/bin/env python3
"""
Script para comparar tipos de DrawIO generados
"""

from pathlib import Path

def compare_drawio_types():
    """Compara los diferentes tipos de DrawIO generados"""
    
    print("üîç Comparaci√≥n de Tipos de DrawIO")
    print("=" * 50)
    
    drawio_dir = Path("outputs/mcp/diagrams/bmc_input/drawio")
    drawio_files = list(drawio_dir.glob("*.drawio"))
    
    types = {
        "png_equivalent": [],
        "aws_icons": [],
        "professional": [],
        "unified": [],
        "minimal": []
    }
    
    # Clasificar archivos
    for file in drawio_files:
        if "png_equivalent" in file.name:
            types["png_equivalent"].append(file)
        elif "aws_icons" in file.name:
            types["aws_icons"].append(file)
        elif "professional" in file.name:
            types["professional"].append(file)
        elif "unified" in file.name:
            types["unified"].append(file)
        elif "minimal" in file.name:
            types["minimal"].append(file)
    
    print(f"\nüìä Tipos de DrawIO Encontrados:")
    
    # PNG Equivalent (NUEVO - estructura exacta del PNG)
    if types["png_equivalent"]:
        file = types["png_equivalent"][0]
        size_kb = file.stat().st_size / 1024
        
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
            aws_shapes = content.count('mxgraph.aws4')
            clusters = content.count('parent=')
            edges = content.count('edge="1"')
            
        print(f"\nüéØ PNG EQUIVALENT (NUEVO - Estructura Exacta):")
        print(f"  üìÑ {file.name}")
        print(f"  üìä {size_kb:.1f}KB, {aws_shapes} iconos AWS, {clusters} contenedores, {edges} conexiones")
        print(f"  üé® Usa: Clusters jer√°rquicos + iconos AWS + conexiones")
        print(f"  ‚≠ê CALIDAD: ID√âNTICA AL PNG")
    
    # AWS Icons (iconos reales pero planos)
    if types["aws_icons"]:
        file = types["aws_icons"][0]
        size_kb = file.stat().st_size / 1024
        
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
            aws_shapes = content.count('mxgraph.aws4')
            
        print(f"\nüé® AWS ICONS (Iconos Reales Planos):")
        print(f"  üìÑ {file.name}")
        print(f"  üìä {size_kb:.1f}KB, {aws_shapes} iconos AWS reales")
        print(f"  üé® Usa: mxgraph.aws4.* (iconos oficiales AWS)")
        print(f"  ‚≠ê CALIDAD: PROFESIONAL con iconos reales")
    
    # Professional (formas b√°sicas)
    if types["professional"]:
        file = types["professional"][0]
        size_kb = file.stat().st_size / 1024
        
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
            elements = content.count('<mxCell')
            
        print(f"\nüèóÔ∏è PROFESSIONAL (Formas B√°sicas):")
        print(f"  üìÑ {file.name}")
        print(f"  üìä {size_kb:.1f}KB, {elements} elementos")
        print(f"  üé® Usa: Formas b√°sicas con colores AWS")
        print(f"  ‚≠ê CALIDAD: Buena estructura, iconos b√°sicos")
    
    # Unified (muy b√°sico)
    if types["unified"]:
        file = types["unified"][0]
        size_kb = file.stat().st_size / 1024
        
        with open(file, 'r', encoding='utf-8') as f:
            content = f.read()
            elements = content.count('<mxCell')
            
        print(f"\nüìù UNIFIED (B√°sico):")
        print(f"  üìÑ {file.name}")
        print(f"  üìä {size_kb:.1f}KB, {elements} elementos")
        print(f"  üé® Usa: Rect√°ngulos simples")
        print(f"  ‚≠ê CALIDAD: B√°sica")
    
    print(f"\nüéØ RECOMENDACI√ìN:")
    if types["png_equivalent"]:
        print(f"  ‚úÖ USAR: {types['png_equivalent'][0].name}")
        print(f"  üé® Raz√≥n: Estructura ID√âNTICA al PNG (clusters + iconos + conexiones)")
        print(f"  üìê Equivalente a: PNG Network Architecture exacto")
    elif types["aws_icons"]:
        print(f"  ‚ö†Ô∏è ALTERNATIVA: {types['aws_icons'][0].name}")
        print(f"  üé® Raz√≥n: Iconos AWS reales pero sin estructura jer√°rquica")
    
    print(f"\nüìà Comparaci√≥n con PNG:")
    print(f"  üñºÔ∏è PNG: Clusters jer√°rquicos + iconos AWS + layout autom√°tico + conexiones")
    print(f"  üìê DrawIO PNG Equivalent: Clusters jer√°rquicos + iconos AWS + layout manual + conexiones")
    print(f"  üìê DrawIO AWS Icons: Iconos AWS reales + layout plano")
    print(f"  üìê DrawIO Professional: Formas b√°sicas + layout manual")
    print(f"  üìê DrawIO Unified: Muy b√°sico")

if __name__ == "__main__":
    compare_drawio_types()
