{
  "workflow_version": "1.0.0",
  "source": "index.md integrated analysis",
  "phases": {
    "precharacterization": {
      "phase": "Precaracterizaci√≥n",
      "source_data": "index.md",
      "system_analysis": {
        "current_system": {
          "name": "BMC - Bolsa Comisionista",
          "type": "Sistema Regulatorio",
          "entity": "Ente Regulador",
          "main_function": "Procesamiento de facturas y c√°lculo de comisiones"
        },
        "data_complexity": {
          "products": "60M registros",
          "product_types": "16,000 categor√≠as",
          "processing_mode": "Facturas individuales y por lotes",
          "source": "Migraci√≥n desde Google Cloud"
        },
        "functional_scope": {
          "backend": [
            "APIs para procesamiento de facturas",
            "Base de datos de productos",
            "Desagregaci√≥n por producto",
            "C√°lculos de comisi√≥n (lote y individual)"
          ],
          "frontend": {
            "forms": "Formularios web para carga de datos",
            "exports": [
              "PDF",
              "Excel"
            ],
            "file_upload": {
              "types": [
                "Archivos individuales",
                "Archivos ZIP"
              ],
              "features": [
                "Facturas pueden repetirse",
                "Procesamiento en background"
              ]
            }
          },
          "integrations": {
            "sftp": "Transmisi√≥n de archivos con otros sistemas",
            "purpose": "Intercambio de datos regulatorios"
          }
        }
      },
      "migration_assessment": {
        "complexity": "High - Regulatory system with 60M records",
        "key_challenges": [
          "DIAN classification compliance",
          "Large dataset migration (60M products)",
          "Business rules preservation",
          "SFTP integration continuity"
        ],
        "recommended_approach": "Strangler Fig Pattern with phased migration"
      }
    },
    "estructuracion": {
      "phase": "Estructuraci√≥n",
      "architecture_design": {
        "microservices": {
          "invoice_service": {
            "source_requirements": [
              "Carga de facturas ‚Üí Tabla de facturas",
              "Bot√≥n calcular ‚Üí Aplicaci√≥n de reglas de negocio",
              "Generaci√≥n de certificado ‚Üí PDF descargable o env√≠o por correo"
            ],
            "aws_implementation": [
              "Lambda",
              "SQS",
              "S3"
            ],
            "handles": "File upload and batch processing"
          },
          "product_service": {
            "source_requirements": [
              "Alimentos (leche, carne, huevos)",
              "Cantidad",
              "Unidad"
            ],
            "aws_implementation": [
              "Lambda",
              "RDS",
              "ElastiCache"
            ],
            "handles": "60M product lookup and DIAN classification"
          },
          "validation_service": {
            "source_requirements": {
              "first_validation": [
                "Producto",
                "Cantidad",
                "Unidad"
              ],
              "second_validation": [
                "Producto",
                "Clasificaci√≥n de producto",
                "Unidad"
              ]
            },
            "aws_implementation": [
              "Lambda",
              "Step Functions"
            ],
            "handles": "Two-layer validation system"
          }
        },
        "data_architecture": {
          "transactional": {
            "current": "PostgreSQL principal",
            "target": "RDS PostgreSQL Multi-AZ"
          },
          "analytical": {
            "current": "Redshift para reporter√≠a",
            "target": "Redshift cluster with Glue ETL"
          }
        }
      }
    },
    "catalogo": {
      "phase": "Cat√°logo",
      "application_mapping": {
        "from_index_analysis": {
          "backend_apis": {
            "current_features": [
              "APIs para procesamiento de facturas",
              "Base de datos de productos",
              "Desagregaci√≥n por producto",
              "C√°lculos de comisi√≥n (lote y individual)"
            ],
            "target_services": [
              "Invoice API",
              "Product API",
              "Commission API"
            ]
          },
          "frontend_components": {
            "current_features": {
              "forms": "Formularios web para carga de datos",
              "exports": [
                "PDF",
                "Excel"
              ],
              "file_upload": {
                "types": [
                  "Archivos individuales",
                  "Archivos ZIP"
                ],
                "features": [
                  "Facturas pueden repetirse",
                  "Procesamiento en background"
                ]
              }
            },
            "target_components": [
              "Upload Forms",
              "Export Tools",
              "Status Dashboard"
            ]
          },
          "integration_points": {
            "current": {
              "sftp": "Transmisi√≥n de archivos con otros sistemas",
              "purpose": "Intercambio de datos regulatorios"
            },
            "target": [
              "Transfer Family SFTP",
              "SES Email",
              "EventBridge"
            ]
          }
        },
        "migration_priorities": [
          "1. Product Service (60M records foundation)",
          "2. Invoice Processing (core business logic)",
          "3. Commission Calculation (regulatory compliance)",
          "4. Certificate Generation (PDF/Email)",
          "5. Frontend Migration (user interface)"
        ]
      }
    },
    "lineamientos": {
      "phase": "Lineamientos",
      "implementation_standards": {
        "regulatory_compliance": {
          "dian_requirements": [
            "Alimentos (leche, carne, huevos)",
            "Cantidad",
            "Unidad"
          ],
          "data_retention": "7 years minimum",
          "audit_trail": "All transactions logged"
        },
        "performance_requirements": {
          "data_volume": {
            "products": "60M registros",
            "product_types": "16,000 categor√≠as",
            "processing_mode": "Facturas individuales y por lotes",
            "source": "Migraci√≥n desde Google Cloud"
          },
          "processing_modes": "Individual and batch processing",
          "response_time": "< 3 seconds for individual, < 30 minutes for batch"
        },
        "security_standards": {
          "data_classification": "Sensitive financial data",
          "encryption": "AES-256 at rest, TLS 1.3 in transit",
          "access_control": "RBAC with MFA for admin operations"
        }
      }
    },
    "mermaid_diagrams": {
      "phase": "Mermaid Architecture Diagrams",
      "context_diagram": "\ngraph TB\n    Users[üë• Usuarios BMC<br/>Operadores]\n    External[üè¢ Sistemas Externos<br/>SFTP Integration]\n    \n    BMC[üèõÔ∏è Sistema BMC<br/>Regulatory Platform]\n    \n    DIAN[üèõÔ∏è DIAN<br/>Tax Authority]\n    Regulatory[üìã Entidades Regulatorias<br/>Financial Oversight]\n    \n    Users --> BMC\n    External --> BMC\n    BMC --> DIAN\n    BMC --> Regulatory\n    \n    style BMC fill:#e1f5fe\n    style DIAN fill:#fff3e0\n            ",
      "container_diagram": "\ngraph TB\n    subgraph \"üåê Frontend Layer\"\n        WebApp[üì± Web Frontend<br/>React SPA]\n        AdminPortal[üîß Admin Portal<br/>Management UI]\n    end\n    \n    subgraph \"üö™ API Layer\"\n        APIGateway[üö™ API Gateway<br/>Central Routing]\n    end\n    \n    subgraph \"‚öôÔ∏è Microservices Layer\"\n        InvoiceService[üìÑ Invoice Service<br/>Processing & OCR]\n        ProductService[üè∑Ô∏è Product Service<br/>60M Records]\n        OCRService[üëÅÔ∏è OCR Service<br/>Textract Integration]\n        CommissionService[üí∞ Commission Service<br/>Business Rules]\n    end\n    \n    subgraph \"üíæ Data Layer\"\n        RDS[(üóÑÔ∏è RDS PostgreSQL<br/>Transactional Data)]\n        Redis[(‚ö° ElastiCache Redis<br/>Caching)]\n        S3[(üì¶ S3<br/>Document Storage)]\n    end\n    \n    WebApp --> APIGateway\n    APIGateway --> InvoiceService\n    APIGateway --> ProductService\n    InvoiceService --> OCRService\n    ProductService --> Redis\n    InvoiceService --> RDS\n    OCRService --> S3\n            ",
      "sequence_diagram": "\nsequenceDiagram\n    participant User as üë§ User\n    participant Frontend as üì± Frontend\n    participant API as üö™ API Gateway\n    participant Invoice as üìÑ Invoice Service\n    participant OCR as üëÅÔ∏è OCR Service\n    participant Product as üè∑Ô∏è Product Service\n    \n    User->>Frontend: Upload Invoice\n    Frontend->>API: POST /invoices/upload\n    API->>Invoice: Process Upload\n    Invoice->>OCR: Extract Text/Data\n    OCR-->>Invoice: Structured Data\n    Invoice->>Product: Match Products (60M lookup)\n    Product-->>Invoice: Matched Products\n    Invoice-->>API: Processing Complete\n            ",
      "data_flow_diagram": "\ngraph LR\n    subgraph \"Data Sources\"\n        Upload[üìÅ File Upload]\n        Images[üñºÔ∏è Images/PDFs]\n    end\n    \n    subgraph \"Processing\"\n        OCR[üëÅÔ∏è OCR Processing]\n        Validation[‚úÖ Validation]\n        Matching[üîç Product Matching]\n    end\n    \n    subgraph \"Storage\"\n        RDS[(üóÑÔ∏è PostgreSQL<br/>60M Products)]\n        S3[(üì¶ S3 Storage)]\n        Cache[(‚ö° Redis Cache)]\n    end\n    \n    Upload --> OCR\n    Images --> OCR\n    OCR --> Validation\n    Validation --> Matching\n    Matching --> RDS\n    OCR --> S3\n    Matching --> Cache\n            "
    }
  },
  "next_steps": [
    "Review generated specifications",
    "Validate with stakeholders",
    "Begin implementation planning",
    "Set up AWS environment"
  ]
}
